webpackJsonp([3],{

/***/ 48:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    var scripts = document.scripts,\n        scripts_count = scripts.length,\n        scripts_total_count = 0,\n        file_loaded_count = 0,\n        percent = document.getElementById('perc'),\n        preloader = document.getElementById('page-preloader');\n\n    var links = document.querySelectorAll('link'),\n        links_count = links.length;\n\n    var _loop = function _loop(i) {\n        links.item(i).onload = function () {\n            console.log(links.item(i));\n            file_loaded();\n        };\n    };\n\n    for (var i = 0; i < links_count; i++) {\n        _loop(i);\n    }\n    for (var i = 0; i < scripts_count; i++) {\n        if (scripts.item(i).async) {\n            scripts_total_count++;\n        }\n    }\n\n    var _loop2 = function _loop2(_i) {\n        if (scripts.item(_i).async) {\n            scripts.item(_i).onload = function () {\n                console.log(scripts.item(_i));\n                file_loaded();\n            };\n            scripts.item(_i).onerror = function () {\n                console.log(scripts.item(_i));\n                file_loaded();\n            };\n        }\n    };\n\n    for (var _i = 0; _i < scripts_count; _i++) {\n        _loop2(_i);\n    }\n    function file_loaded() {\n        file_loaded_count++;\n        percent.innerHTML = (100 / (scripts_total_count + links_count) * file_loaded_count << 0) + '%';\n        console.log((100 / (scripts_total_count + links_count) * file_loaded_count << 0) + '%');\n        if (file_loaded_count >= scripts_total_count + links_count) {\n            setTimeout(function () {\n                if (!preloader.classList.contains('preloader--done')) {\n                    preloader.classList.add('preloader--done');\n                    setTimeout(function () {\n                        preloader.classList.add('preloader--hidden');\n                    }, 1200);\n                }\n            }, 700);\n        }\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXgvcHJlbG9hZGVyLmpzP2M3MDciXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzY3JpcHRzIiwic2NyaXB0c19jb3VudCIsImxlbmd0aCIsInNjcmlwdHNfdG90YWxfY291bnQiLCJmaWxlX2xvYWRlZF9jb3VudCIsInBlcmNlbnQiLCJnZXRFbGVtZW50QnlJZCIsInByZWxvYWRlciIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImxpbmtzX2NvdW50IiwiaSIsIml0ZW0iLCJvbmxvYWQiLCJjb25zb2xlIiwibG9nIiwiZmlsZV9sb2FkZWQiLCJhc3luYyIsIm9uZXJyb3IiLCJpbm5lckhUTUwiLCJzZXRUaW1lb3V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxVQUFTQyxLQUFULEVBQWU7QUFDekQsUUFDSUMsVUFBVUgsU0FBU0csT0FEdkI7QUFBQSxRQUVJQyxnQkFBZ0JELFFBQVFFLE1BRjVCO0FBQUEsUUFHSUMsc0JBQXNCLENBSDFCO0FBQUEsUUFJSUMsb0JBQW9CLENBSnhCO0FBQUEsUUFLSUMsVUFBVVIsU0FBU1MsY0FBVCxDQUF3QixNQUF4QixDQUxkO0FBQUEsUUFNSUMsWUFBWVYsU0FBU1MsY0FBVCxDQUF3QixnQkFBeEIsQ0FOaEI7O0FBUUEsUUFDSUUsUUFBUVgsU0FBU1ksZ0JBQVQsQ0FBMEIsTUFBMUIsQ0FEWjtBQUFBLFFBRUlDLGNBQWNGLE1BQU1OLE1BRnhCOztBQVR5RCwrQkFhNUNTLENBYjRDO0FBY2pESCxjQUFNSSxJQUFOLENBQVdELENBQVgsRUFBY0UsTUFBZCxHQUF1QixZQUFVO0FBQzdCQyxvQkFBUUMsR0FBUixDQUFhUCxNQUFNSSxJQUFOLENBQVdELENBQVgsQ0FBYjtBQUNBSztBQUNILFNBSEQ7QUFkaUQ7O0FBYXJELFNBQUssSUFBSUwsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxXQUFwQixFQUFpQ0MsR0FBakMsRUFBcUM7QUFBQSxjQUE1QkEsQ0FBNEI7QUFLcEM7QUFDRCxTQUFLLElBQUlBLElBQUksQ0FBYixFQUFnQkEsSUFBSVYsYUFBcEIsRUFBbUNVLEdBQW5DLEVBQXVDO0FBQy9CLFlBQUlYLFFBQVFZLElBQVIsQ0FBYUQsQ0FBYixFQUFnQk0sS0FBcEIsRUFBMEI7QUFDdEJkO0FBQ0g7QUFDUjs7QUF2Qm9ELGlDQXlCNUNRLEVBekI0QztBQTBCakQsWUFBSVgsUUFBUVksSUFBUixDQUFhRCxFQUFiLEVBQWdCTSxLQUFwQixFQUEwQjtBQUN0QmpCLG9CQUFRWSxJQUFSLENBQWFELEVBQWIsRUFBZ0JFLE1BQWhCLEdBQXlCLFlBQVU7QUFDL0JDLHdCQUFRQyxHQUFSLENBQVlmLFFBQVFZLElBQVIsQ0FBYUQsRUFBYixDQUFaO0FBQ0RLO0FBQ0YsYUFIRDtBQUlBaEIsb0JBQVFZLElBQVIsQ0FBYUQsRUFBYixFQUFnQk8sT0FBaEIsR0FBMEIsWUFBVTtBQUNoQ0osd0JBQVFDLEdBQVIsQ0FBWWYsUUFBUVksSUFBUixDQUFhRCxFQUFiLENBQVo7QUFDREs7QUFDRixhQUhEO0FBSUg7QUFuQ2dEOztBQXlCckQsU0FBSyxJQUFJTCxLQUFJLENBQWIsRUFBZ0JBLEtBQUlWLGFBQXBCLEVBQW1DVSxJQUFuQyxFQUF1QztBQUFBLGVBQTlCQSxFQUE4QjtBQVd0QztBQUNELGFBQVNLLFdBQVQsR0FBc0I7QUFDbEJaO0FBQ0FDLGdCQUFRYyxTQUFSLEdBQW9CLENBQUcsT0FBT2hCLHNCQUFzQk8sV0FBN0IsQ0FBRCxHQUErQ04saUJBQWhELElBQXNFLENBQXZFLElBQTJFLEdBQS9GO0FBQ0FVLGdCQUFRQyxHQUFSLENBQVksQ0FBRyxPQUFPWixzQkFBc0JPLFdBQTdCLENBQUQsR0FBK0NOLGlCQUFoRCxJQUFzRSxDQUF2RSxJQUEyRSxHQUF2RjtBQUNBLFlBQUlBLHFCQUFzQkQsc0JBQXNCTyxXQUFoRCxFQUE4RDtBQUMxRFUsdUJBQVcsWUFBSTtBQUNYLG9CQUFJLENBQUNiLFVBQVVjLFNBQVYsQ0FBb0JDLFFBQXBCLENBQTZCLGlCQUE3QixDQUFMLEVBQXFEO0FBQ2pEZiw4QkFBVWMsU0FBVixDQUFvQkUsR0FBcEIsQ0FBd0IsaUJBQXhCO0FBQ0FILCtCQUFXLFlBQUk7QUFDWGIsa0NBQVVjLFNBQVYsQ0FBb0JFLEdBQXBCLENBQXdCLG1CQUF4QjtBQUNILHFCQUZELEVBRUUsSUFGRjtBQUdIO0FBQ0osYUFQRCxFQU9FLEdBUEY7QUFRSDtBQUNKO0FBQ1IsQ0FwREQiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbihldmVudCl7XHJcbiAgICBsZXQgXHJcbiAgICAgICAgc2NyaXB0cyA9IGRvY3VtZW50LnNjcmlwdHMsXHJcbiAgICAgICAgc2NyaXB0c19jb3VudCA9IHNjcmlwdHMubGVuZ3RoLFxyXG4gICAgICAgIHNjcmlwdHNfdG90YWxfY291bnQgPSAwLFxyXG4gICAgICAgIGZpbGVfbG9hZGVkX2NvdW50ID0gMCxcclxuICAgICAgICBwZXJjZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BlcmMnKSxcclxuICAgICAgICBwcmVsb2FkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS1wcmVsb2FkZXInKTtcclxuXHJcbiAgICBsZXQgXHJcbiAgICAgICAgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyksXHJcbiAgICAgICAgbGlua3NfY291bnQgPSBsaW5rcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciggbGV0IGkgPSAwOyBpIDwgbGlua3NfY291bnQ7IGkrKyl7XHJcbiAgICAgICAgICAgIGxpbmtzLml0ZW0oaSkub25sb2FkID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBsaW5rcy5pdGVtKGkpKVxyXG4gICAgICAgICAgICAgICAgZmlsZV9sb2FkZWQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciggbGV0IGkgPSAwOyBpIDwgc2NyaXB0c19jb3VudDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmIChzY3JpcHRzLml0ZW0oaSkuYXN5bmMpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdHNfdG90YWxfY291bnQrK1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKCBsZXQgaSA9IDA7IGkgPCBzY3JpcHRzX2NvdW50OyBpKyspe1xyXG4gICAgICAgICAgICBpZiAoc2NyaXB0cy5pdGVtKGkpLmFzeW5jKXtcclxuICAgICAgICAgICAgICAgIHNjcmlwdHMuaXRlbShpKS5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNjcmlwdHMuaXRlbShpKSlcclxuICAgICAgICAgICAgICAgICAgIGZpbGVfbG9hZGVkKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNjcmlwdHMuaXRlbShpKS5vbmVycm9yID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzY3JpcHRzLml0ZW0oaSkpXHJcbiAgICAgICAgICAgICAgICAgICBmaWxlX2xvYWRlZCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZmlsZV9sb2FkZWQoKXtcclxuICAgICAgICAgICAgZmlsZV9sb2FkZWRfY291bnQrKztcclxuICAgICAgICAgICAgcGVyY2VudC5pbm5lckhUTUwgPSAoKCgxMDAgLyAoc2NyaXB0c190b3RhbF9jb3VudCArIGxpbmtzX2NvdW50KSkgICogZmlsZV9sb2FkZWRfY291bnQpIDw8IDApKyAnJSc7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCgoKDEwMCAvIChzY3JpcHRzX3RvdGFsX2NvdW50ICsgbGlua3NfY291bnQpKSAgKiBmaWxlX2xvYWRlZF9jb3VudCkgPDwgMCkrICclJylcclxuICAgICAgICAgICAgaWYgKGZpbGVfbG9hZGVkX2NvdW50ID49IChzY3JpcHRzX3RvdGFsX2NvdW50ICsgbGlua3NfY291bnQpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmVsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcmVsb2FkZXItLWRvbmUnKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWRlci5jbGFzc0xpc3QuYWRkKCdwcmVsb2FkZXItLWRvbmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlbG9hZGVyLmNsYXNzTGlzdC5hZGQoJ3ByZWxvYWRlci0taGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMTIwMClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LDcwMCkgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbn0pXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2luZGV4L3ByZWxvYWRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ })

},[48]);